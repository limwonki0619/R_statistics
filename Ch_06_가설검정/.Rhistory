geom_area(aes(fill=area), alpha=0.3) +
geom_line() +
geom_hline(yintercept = 0, color='black')
Basic_Plot <- ggplot(Cars93, aes(x=Price, y=Horsepower)) + # x: 가격, y: 마력
geom_point(aes(colour=DriveTrain))
library(ggplot2)
Basic_Plot <- ggplot(Cars93, aes(x=Price, y=Horsepower)) + # x: 가격, y: 마력
geom_point(aes(colour=DriveTrain))
library(MASS)
Basic_Plot <- ggplot(Cars93, aes(x=Price, y=Horsepower)) + # x: 가격, y: 마력
geom_point(aes(colour=DriveTrain))
Basic_Plot +
scale_x_continuous(breaks = c(10,20,30,40,50,60))
Basic_Plot +
geom_line()
Cars93
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=MPG.highway))
str(Cars93)
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=MPG.highway)) +
geom_line(aes(y=MPG.city))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=MPG.highway, color="Coral1")) +
geom_line(aes(y=MPG.city), color="Royalblue")
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=wheelbase, color="Coral1")) +
geom_line(aes(y=Weight), color="Royalblue")
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Weight), color="Royalblue")
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Weight), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~./3, name = "Weight"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Weight), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~./4, name = "Weight"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Weight), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~./40, name = "Weight"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Weight), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~./4, name = "Weight"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=EngineSize), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~./4, name = "EngineSize"))
~./4
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=EngineSize), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*4, name = "EngineSize"))
max(Cars93$Wheelbase)/max(Cars93$EngineSize)
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=EngineSize), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*21, name = "EngineSize"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=EngineSize), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(.*21, name = "EngineSize"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=EngineSize), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(EngineSize*21, name = "EngineSize"))
max(Cars93$Wheelbase)/max(Cars93$EngineSize)
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=EngineSize), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*21, name = "EngineSize"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=EngineSize), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~./21, name = "EngineSize"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=EngineSize), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*21, name = "EngineSize"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*21, name = "Rear.seat.room"))
max(Cars93$Wheelbase)/max(Cars93$Rear.seat.room)
max(Cars93$Wheelbase)/max(Cars93$Rear.seat.room)
max(Cars93$Wheelbase)/max(Cars93$Rear.seat.room,na.rm = T)
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3.3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~./3.3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3.3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3.3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room/3.3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~./3.3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3, name = "Rear.seat.room"))
max(Cars93$Wheelbase)
/max(Cars93$Rear.seat.room,na.rm = T)
max(Cars93$Rear.seat.room,na.rm = T)
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*0.3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*0.3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3.3, name = "Rear.seat.room"))
max(Cars93$Wheelbase)/max(Cars93$Rear.seat.room,na.rm = T)
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3.3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3.3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase*10, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") +
scale_y_continuous(sec.axis = sec_axis(~.*0.3, name = "Rear.seat.room"))
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3.3), color="Royalblue") + # Rear.seat.room에 3을 곱한
scale_y_continuous(sec.axis = sec_axis(~.*0.3, name = "Rear.seat.room")) # sec_axis는 첫번째 축을 기준으로 만듦
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*3), color="Royalblue") + # Rear.seat.room에 3을 곱한
scale_y_continuous(sec.axis = sec_axis(~.*0.3, name = "Rear.seat.room")) # sec_axis는 첫번째 축을 기준으로 만듦
max_ratio <- max(Cars93$Wheelbase)/max(Cars93$Rear.seat.room,na.rm = T) # 새로만들 축에 곱할 y1과 y2의 최대치의 비율
ggplot(Cars93, aes(x=Price)) +
geom_line(aes(y=Wheelbase, color="Coral1")) +
geom_line(aes(y=Rear.seat.room*max_ratio), color="Royalblue") + # Rear.seat.room에 3을 곱한 이유는
scale_y_continuous(sec.axis = sec_axis(~.*(max_ratio/10), name = "Rear.seat.room")) # sec_axis는 첫번째 축을 기준으로 만듦
# 연도별로 영억 채우기
ggplot(TS,aes(x=date,y=value)) +
geom_line() +
geom_area(data = TS[substr(TS$date,1,4) == "2012",], fill="hotpink", alpha=0.3) +
geom_area(data = filter(TS, str_sub(TS$date,1,4) == "2013"), fill = "royalblue", alpha=0.3) +
geom_area(data = TS[grep("^2014",TS$date),], fill = "gold", alpha=0.3) +
geom_area(data = TS[str_detect(TS$date,"^2015"),], fill = "green", alpha=0.3) +
geom_area(data = TS[grep("[^2012|2013|2014|2015]",substr(TS$date,1,4)),], fill="cyan1", alpha=0.3)
# 0을 기준으로 위아래 다른색 채우기
# 막대
ggplot(TS, aes(x=date, y=value)) +
geom_col(data = TS[TS$value <= 0,], fill = "Coral1", alpha = .3) +
geom_col(data = TS[TS$value > 0,], fill = "royalblue1", alpha = .3) +
geom_hline(yintercept = 0, color="black") +
theme_bw()
setwd("D:/limworkspace/R_Statistics/Ch_05_추정")
# 유효성 모의실험 : Y1_bar를 구하기 위한 함수
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for (i in 1:n) {
new_x <- i*x[i]
sum <- sum+new_x
n2 <- n2 + i
}
return(sum / n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for (i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[(y1 > -0.1) & ( y1 < 0.1 )])
n2 <- length(y2[(y2 > -0.1) & ( y2 < 0.1 )])
data.frame(mean=mean(y1), var=var(y1), n=n1)
data.frame(mean=mean(y2), var=var(y2), n=n2)
par(mfrow=c(1,2))
hist(y1, probability = T, xlim=c(-2,2), ylim=c(0, 0.65))
hist(y1, probability = T, xlim=c(-2,2), ylim=c(0, 0.65), main = "(x1+x2+x3)/3", xlab="", col="orange")
par(mfrow=c(1,2))
hist(y1, probability = T, xlim=c(-2,2), ylim=c(0, 0.65), main = "(x1+x2+x3)/3", xlab="", col="orange")
hist(y2, probability = T, xlim=c(-2,2), ylim=c(0, 0.65), main = "(1*x1 + 2*x2 + 3*x3)/6", xlab="", col="orange")
data.frame(mean=mean(y1), var=var(y1), n=n1) # y1과 y2비교 : y1이 y2보다 중심에 더 몰려있음을 확인
data.frame(mean=mean(y2), var=var(y2), n=n2)
x <- seq(-3,3,0.01)
y <- dnorm(x)
y1_bar <- dnorm(x, sd=sqrt(1/3))
y2_bar <- dnorm(x, sd=sqrt(7/18))
plot(x, y, type = "l", ylim = c(0, 0.8), axes=F, ylab="", lwd=3, col="yellow")
lines(x, y1_bar, col="red", lwd=3)
lines(x, y2_bar, col="green", ltyh=2, lwd=3)
plot(x, y, type = "l", ylim = c(0, 0.8), axes=F, ylab="", lwd=3, col="yellow")
lines(x, y1_bar, col="red", lwd=3)
lines(x, y2_bar, col="green", lty=2, lwd=3)
plot(x, y, type = "l", ylim = c(0, 0.8), axes=F, ylab="", lwd=3, col="yellow")
lines(x, y1_bar, col="red", lwd=3)
lines(x, y2_bar, col="green", lty=2, lwd=3)
plot(x, y, type = "l", ylim = c(0, 0.8), axes=F, ylab="", lwd=3, col="yellow")
lines(x, y1_bar, col="red", lwd=3)
lines(x, y2_bar, col="green", lty=2, lwd=3)
par(mfrow=c(1,1))
plot(x, y, type = "l", ylim = c(0, 0.8), axes=F, ylab="", lwd=3, col="yellow")
lines(x, y1_bar, col="red", lwd=3)
lines(x, y2_bar, col="green", lty=2, lwd=3)
plot(x, y, type = "l", ylim = c(0, 0.8), ylab="", lwd=3, col="yellow")
lines(x, y1_bar, col="red", lwd=3)
lines(x, y2_bar, col="green", lty=2, lwd=3)
# 예제 5-2) 유효성 모의실험 : Y1_bar를 구하기 위한 함수
mean.seq <- function(x) { # Y2 = (1*x1 + 2*x2 + 3*x3)/6 을 계산하기 위한 함수
n <- length(x)
sum <- 0
n2 <- 0
for (i in 1:n) {
new_x <- i*x[i]
sum <- sum+new_x
n2 <- n2 + i
}
return(sum / n2)
}
# 예제 5-3) 모비율에 대한 점추정
library(prob)
n <- 3
smps. all <- rolldie(n)
smps.all <- rolldie(n)
smps.all
str(smps.all)
is.even <- function(x) return(!x%%2)
var.p <- function(x) {
return(sum(is.even(x))/s.size)
}
p_hat <- apply(smps.all, 1, p.even)
var.p <- function(x) {
return(sum(x-mean(x))^2 / length(x))
}
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/s,size)
}
p_hat <- apply(smps.all, 1, p.even)
n <- 3
smps.all <- rolldie(n) # 눈이 6인 주사위 던지기의 모든 경우의 수
is.even <- function(x) return(!x%%2)
var.p <- function(x) {
return(sum(x-mean(x))^2 / length(x))
}
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/s,size)
}
p_hat <- apply(smps.all, 1, p.even)
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/s,size)
}
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/s.size)
}
p_hat <- apply(smps.all, 1, p.even)
mean(p.hat)
p_hat <- apply(smps.all, 1, p.even)
mean(p_hat)
p.p <- 0.5
var.p(p_hat)
p.p*(1-p.p)/3
ssqrt(var.p(phat))
sqrt(var.p(phat))
sqrt(var.p(p_hat))
is.even
is.even <- function(x) return(!x%%2)
is.even
is.even(2)
is.even(3)
is.even <- function(x) return(ifelse(x%%2 == 0, T,F))
var.p <- function(x) { # 분산
return(sum(x-mean(x))^2 / length(x))
}
qnorm(0.95)
qnorm(0.99)
qnorm(0.90)
qnorm(0.90,0,1)
qnorm(0.95,0,1)
# 2.1 신뢰구간
# 구간추정을 위해 표본으로부터 구한 하한과 상한을 각각 θ_hat_L, θ_hat_U라 할 때,
# 0 < α < 1인 α에 대해 P(θ_hat_L < θ < θ_hat_U) = 1-α를 만족하는 구간 (θ_hat_L, θ_hat_U)을
# 모수 θ에 대한 100(1-α)% 신뢰구간(CL, Confidence Interval)이라 부르고, 확률 (1-α)를 신뢰수준(Confidence level)이라 부른다.
# 99%(α=0.01), 95%(α=0.05), 90%(α=0.1)
?qnorm
# 2.1 신뢰구간
# 구간추정을 위해 표본으로부터 구한 하한과 상한을 각각 θ_hat_L, θ_hat_U라 할 때,
# 0 < α < 1인 α에 대해 P(θ_hat_L < θ < θ_hat_U) = 1-α를 만족하는 구간 (θ_hat_L, θ_hat_U)을
# 모수 θ에 대한 100(1-α)% 신뢰구간(CL, Confidence Interval)이라 부르고, 확률 (1-α)를 신뢰수준(Confidence level)이라 부른다.
# 99%(α=0.01), 95%(α=0.05), 90%(α=0.1)
qnorm(0.975)
qnorm(0.95) # 양측 값
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,0.01)
smps <- matrix(rnorm(n * length(x)), ncol=n)
xbar <- apply(smps, 1, mean)
se <- 1 / sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z*se
ul <- xbar + z*se
plot(y, type="n", xlab="trial", ylab="z", main="95% Confidence Interval For Population mean",
xlim=c(1,100), ylim=c(-1.5,1.5), cex.lab=1.8)
y <- seq(-3,3,0.01)
smps <- matrix(rnorm(n * length(x)), ncol=n)
xbar <- apply(smps, 1, mean)
se <- 1 / sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z*se
ul <- xbar + z*se
plot(y, type="n", xlab="trial", ylab="z", main="95% Confidence Interval For Population mean",
xlim=c(1,100), ylim=c(-1.5,1.5), cex.lab=1.8)
abline(h=0, col="red", lty=2)
1.c <- rep(NA, length(x))
l.c <- rep(NA, length(x))
l.c <- ifelse(ll*ul > 0, "red","black")
arrows(1:length(x), ll, 1:length(x), ul, code=3,
angle=90, length = 0.02, col=l.c, lwd=1.5)
ll
z <- qnorm(1 - alpha/2)
z
arrows(1:length(x), ll, 1:length(x), ul, code=2,
angle=90, length = 0.02, col=l.c, lwd=1.5)
plot(y, type="n", xlab="trial", ylab="z", main="95% Confidence Interval For Population mean",
xlim=c(1,100), ylim=c(-1.5,1.5), cex.lab=1.8) # 100개의 신뢰구간이 들어갈 빈 plot 생성
abline(h=0, col="red", lty=2) # 평균 0인 line 생성
l.c <- rep(NA, length(x))
l.c <- ifelse(ll*ul > 0, "red","black")  # 각각의 신뢰구간이 평균을 포함하면 하한*상한은 음수가 나옴 = black, 평균을 포함하지 않으면 양수 = red
arrows(1:length(x), ll, 1:length(x), ul, code=2,
angle=90, length = 0.02, col=l.c, lwd=1.5) #
# P(θ_hat_L < θ < θ_hat_U) = P(-t(α/2,n-1)) < θ < t(α/2,n-1)) = 1 - α
qnorm(0.025)
# P(θ_hat_L < θ < θ_hat_U) = P(-t(α/2,n-1)) < θ < t(α/2,n-1)) = 1 - α
qnorm(0.5)
# P(θ_hat_L < θ < θ_hat_U) = P(-t(α/2,n-1)) < θ < t(α/2,n-1)) = 1 - α
qnorm(0.05)
qt(0.025,4)
options(digits=3)
qt(0.025,4)
x <- c(520, 498, 481, 512, 515, 542, 520, 518, 527, 526)
x_bar <- x/length(x)
x_bar
x_bar <- sum(x)/length(x)
x_bar
s <- sqrt(((x-x_bar)^2)/9)
s
s <- sqrt(sum((x-x_bar)^2)/9)
s
smp <- c(520, 498, 481, 512, 515, 542, 520, 518, 527, 526)
ci.t <- function(x, alpha=0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m - t*(s/sqrt(n))
ul <- m + t*(s/sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520, 498, 481, 512, 515, 542, 520, 518, 527, 526)
ci.t(smp)
ci.t(smp, 0.1)
ci.t <- function(x, alpha=0.05) {
n <- length(smp) # 표본갯수 n
m <- mean(x)     # 표본평균
s <- sd(x)       # 표본표준편차
t <- qt(1-(alpha/2), df=n-1) # t값 (양측)
ll <- m - t*(s/sqrt(n))      # 신뢰구간 하한
ul <- m + t*(s/sqrt(n))      # 신뢰구간 상한
ci <- c(1-alpha, ll, m, ul, s)  # 신뢰구간, 하한, 평균, 상한
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit", "sd")
return(ci)
}
smp <- c(520, 498, 481, 512, 515, 542, 520, 518, 527, 526)
ci.t(smp) # alpha = 0.05
ci.t(smp, 0.1) # alpha = 0.1
qnorm(0.05)
qnorm(1-(0.05/2))
qnorm(0.05/2)
qnorm(0.05)    # 단측 95% z값
qnorm(0.05/2)  # 양측 95% z값
smp <- c(520, 498, 481, 512, 515, 542, 520, 518, 527, 526)
ci.t(smp)      # alpha = 0.05
ci.t(smp, 0.1) # alpha = 0.1
qf(0.05)
qf(0.05, 2,3)
qf(0.05, 2,3)
qf(0.95, 2,3)
qnorm(0.05/2)  # 양측 95% z값
qnorm(0.95)
setwd("D:/limworkspace/R_Statistics/Ch_06_가설검정")
setwd("D:/limworkspace/R_Statistics/Ch_06_가설검정")
data <- read.csv("data/2010_6차_직접측정 데이터.csv")
data <- read.csv("data/2010_6차_직접측정 데이터.csv", header=T)
str(data)
library(dplyr)
library(ggplot2)
library(reshape)
tmp <- filter(data, 나이==7)
height.p <- tmp$X104.키
tmp
height.p <- tmp$X104.키
set.seed(9)
height <- height.p[sample(lenght(height.p), 15)]; height
height <- height.p[sample(length(height.p), 15)]; height
tmp <- filter(data, 나이==7) # 조건에 맞는 행만 추출
tmp
sample(length(height.p), 15)
sample(5,2)
sample(5)
sample(10) # 숫자의 순서를
sample(10, 2)
length(height.p)
?t.test
pt(0,727, 14)
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
x_bar <- mean(height)
x_bar
u <- 1230.533
u <- 1220
sd <- sd(height)
sd
SE <- sd/sqrt(length(height))
SE
T <- x_bar - u / SE
T
T <- (x_bar - u) / SE
T
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
height
x_bar <- mean(height)
u <- 1220
sd <- sd(height)
SE <- sd/sqrt(length(height))
T <- (x_bar - u) / SE
T
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
x_bar <- mean(height)
u <- 1220
sd <- sd(height)
SE <- sd/sqrt(length(height))
T <- (x_bar - u) / SE
T
qt(T,14)
pt(T,14)
qt(0.025, 14)
qt(0.975, 14)
pt(T,14) # 귀무가설 채택
T
# 위 예에서 구한 검정통계량(T)에 대한 유의확률을 구해보자.
# 자유도가 14인 t-분포에서 0.546에 대한 유의확률은 0.546보다 클 확률로 R에서 다음과 같이 구할 수 있다.
1 - pt(T,df=14)
set.seed(9)
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
x_bar <- mean(height)
u <- 1220
sd <- sd(height)
SE <- sd/sqrt(length(height))
T <- (x_bar - u) / SE
T
sqrt(length(height))
sd
# 위 예에서 구한 검정통계량(T)에 대한 유의확률을 구해보자.
# 자유도가 14인 t-분포에서 0.546에 대한 유의확률은 0.546보다 클 확률로 R에서 다음과 같이 구할 수 있다.
1 - pt(T,df=14)
1 - pt(T,df=14)
?pt
1 - pt(T,df=14) # 디폴트 값이 양측검정
T
t.test(height)
?t.test
t.test(height,mu=1220, alternative = "greater")
t.test(height,mu=1220, alternative = "two")
sd
x_bar
x_bar
T
1 - pt(T,df=14) # 디폴트 값이 양측검정
t.test(height,mu=1220, alternative = "two") # 양측검정, α = 0.05
1 - pt(T,df=14) # 디폴트 값이 양측검정
t.test(height,mu=1220, alternative = "two") # 양측검정, α = 0.05
t.test(height,mu=1220, alternative = "two.sided") # 양측검정, α = 0.05
t.test(height,mu=1220, alternative = "two") # 양측검정, α = 0.05
t.test(height,mu=1220, alternative = "sided") # 양측검정, α = 0.05
