u <- 1220
sd <- sd(height)
sd
SE <- sd/sqrt(length(height))
SE
T <- x_bar - u / SE
T
T <- (x_bar - u) / SE
T
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
height
x_bar <- mean(height)
u <- 1220
sd <- sd(height)
SE <- sd/sqrt(length(height))
T <- (x_bar - u) / SE
T
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
x_bar <- mean(height)
u <- 1220
sd <- sd(height)
SE <- sd/sqrt(length(height))
T <- (x_bar - u) / SE
T
qt(T,14)
pt(T,14)
qt(0.025, 14)
qt(0.975, 14)
pt(T,14) # 귀무가설 채택
T
# 위 예에서 구한 검정통계량(T)에 대한 유의확률을 구해보자.
# 자유도가 14인 t-분포에서 0.546에 대한 유의확률은 0.546보다 클 확률로 R에서 다음과 같이 구할 수 있다.
1 - pt(T,df=14)
set.seed(9)
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
x_bar <- mean(height)
u <- 1220
sd <- sd(height)
SE <- sd/sqrt(length(height))
T <- (x_bar - u) / SE
T
sqrt(length(height))
sd
# 위 예에서 구한 검정통계량(T)에 대한 유의확률을 구해보자.
# 자유도가 14인 t-분포에서 0.546에 대한 유의확률은 0.546보다 클 확률로 R에서 다음과 같이 구할 수 있다.
1 - pt(T,df=14)
1 - pt(T,df=14)
?pt
1 - pt(T,df=14) # 디폴트 값이 양측검정
T
t.test(height)
?t.test
t.test(height,mu=1220, alternative = "greater")
t.test(height,mu=1220, alternative = "two")
sd
x_bar
x_bar
T
1 - pt(T,df=14) # 디폴트 값이 양측검정
t.test(height,mu=1220, alternative = "two") # 양측검정, α = 0.05
1 - pt(T,df=14) # 디폴트 값이 양측검정
t.test(height,mu=1220, alternative = "two") # 양측검정, α = 0.05
t.test(height,mu=1220, alternative = "two.sided") # 양측검정, α = 0.05
t.test(height,mu=1220, alternative = "two") # 양측검정, α = 0.05
t.test(height,mu=1220, alternative = "sided") # 양측검정, α = 0.05
set.seed(9)
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
data <- read.csv("data/2010_6차_직접측정 데이터.csv", header=T)
str(data)
set.seed(9)
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
tmp <- filter(data, 나이==7) # 조건에 맞는 행만 추출
height.p <- tmp$X104.키      # 키 변수
set.seed(9)
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
data <- read.csv("data/2010_6차_직접측정 데이터.csv", header=T)
str(data)
tmp <- filter(data, 나이==7) # 조건에 맞는 행만 추출
data <- read.csv("data/2010_6차_직접측정 데이터.csv", header=T)
str(data)
tmp <- filter(data, 나이==7) # 조건에 맞는 행만 추출
tmp <- filter(data, 나이==7) # 조건에 맞는 행만 추출
tmp
tmp <- filter(data, 나이 == 7) # 조건에 맞는 행만 추출
library(dplyr)
library(ggplot2)
library(reshape)
tmp <- filter(data, 나이 == 7) # 조건에 맞는 행만 추출
height.p <- tmp$X104.키      # 키 변수
set.seed(9)
height <- height.p[sample(length(height.p), 15)]; height # sample()함수를 이용해 15개의 확률표본을 생성, sample(238,15) :  238개 중에서 임의로 15개 뽑기
x_bar <- mean(height)
u <- 1220
sd <- sd(height)
SE <- sd/sqrt(length(height))
SE
T <- (x_bar - u) / SE # t(n-1)에서의 검정통계량
T
n <- length(height)
SE <- sd/sqrt(n) # 표준오차
SE
T <- (x_bar - u) / SE         # t(n-1)에서의 검정통계량
T
qt(T,14)
t.test(height, mu=1220, alternative = "two.sided") # 양측검정, α = 0.05
pt(T,df=14)
T
1 - pt(T,df=14) # 디폴트 값이 양측검정
t.test(height, mu=1220, alternative = "two.sided") # 양측검정(디폴트), α = 0.05
qt(0.025, 14) # P(T < Cl) = 0.025인 자유도가 14인 t분포에서의 값 cl은 약 -2.14
qt(0.975, 14) # P(T > Cu) = 0.025인 자유도가 14인 t분포에서의 값 cu는 약 2.14
qt(T, 14)
T
t.test(height, mu=1220, alternative = "less") # 좌측검정, α = 0.05m, H1 : 7세 남자아이의 키가 1220보다 작다
t.test(height, mu=1220, alternative = "greater")   # 우측검정, α = 0.05, H1 : 7세 남자아이의 키가 1220보다 크다
t.test(height, mu=1220, alternative = "two.sided") # 양측검정(디폴트), α = 0.05
t.test(height, mu=1220, alternative = "less")      # 좌측검정, α = 0.05, H1 : 7세 남자아이의 키가 1220보다 작다
t.test(height, mu=1220, alternative = "greater")   # 우측검정, α = 0.05, H1 : 7세 남자아이의 키가 1220보다 크다
t.test(height, mu=1220, alternative = "two.sided") # 양측검정(디폴트), α = 0.05, H0 채택
t.test(height, mu=1220, alternative = "less")      # 좌측검정, α = 0.05, H1 : 7세 남자아이의 키가 1220보다 작다
t.test(height, mu=1220, alternative = "greater")   # 우측검정, α = 0.05, H1 : 7세 남자아이의 키가 1220보다 크다
height
1 - pt(T,df=14) # 디폴트 값이 양측검정
1 - pt(T,df=14) # 검정통계량 t에 대한 양측검정(디폴트) 유의확률 -> 유의확률*2 or 유의수준/2 와 비교해야함
1 - pt(T,df=14)*2
(1 - pt(T,df=14))*2
t.test(height, mu=1220, alternative = "two.sided") # 양측검정(디폴트), α = 0.05, p-valeu 0.4115 -> H0 채택
data <- c(3837, 3334, 2208, 1745, 2576, 3208, 3746, 3523, 3430, 3480, 31116, 3428, 2184, 2383, 3500, 3866, 3542, 3278)
# 2.1.1 가설수림
# H0 : (여아) 신생아의 체중은 2800g이다.
# H1 : (여아) 신생아의 체중은 2800g보다 크다.
# 검정통계량 T
options(digits = 3)
(mean(data) - 2800) / (sd(data) / sqrt(length(data)))
T <- (mean(data) - 2800) / (sd(data) / sqrt(length(data)))
T
mean(data)
sd(data)
length(data)
mean(data)
data <- c(3837, 3334, 2208, 1745, 2576, 3208, 3746, 3523, 3430, 3480, 3116, 3428, 2184, 2383, 3500, 3866, 3542, 3278)
# 2.1.1 가설수림
# H0 : (여아) 신생아의 체중은 2800g이다.
# H1 : (여아) 신생아의 체중은 2800g보다 크다.
# 검정통계량 T
options(digits = 3)
T <- (mean(data) - 2800) / (sd(data) / sqrt(length(data)))
T
# 2.1.2 유의수준 α = 0.05
# 임계값
qt(1-0.05, df=length(data)-1)
t <- (mean(data) - 2800) / (sd(data) / sqrt(length(data)))
# 검정통계량(t)에 대한 유의확률
1-pt(T, df=length(data)-1)
# 2.1.2 유의수준 α = 0.05
# (우측) 임계값
qt(1-0.05, df=length(data)-1)
# 검정통계량(t)에 대한 유의확률
1-pt(T, df=length(data)-1)
# 2.1.2 유의수준 α = 0.05
# 검정통계량(t)에 대한 유의확률
1-pt(T, df=length(data)-1)
# 2.1.2 유의수준 α = 0.05
# 유의수준 5%에서 우측 임계값
qt(1-0.05, df=length(data)-1)
# 2.1.2 유의수준 α = 0.05
# 유의수준 5%에서 우측 임계값
qt(1-0.05, df=length(data)-1)
# 2.1.2 유의수준 α = 0.05
# 유의수준 5%에서 우측 임계값
qt(1-0.05, df=length(data)-1)
t
# 유의확률을 이용한 판정
# 검정통계량(t)에 대한 유의확률
1-pt(T, df=length(data)-1)
# 2.1.3.3 t.test 함수를 이용한 판정
t.test(data, mu=2800, alternative = "greater")
t
# 2.1.3.3 t.test 함수를 이용한 판정
t.test(data, mu=2800, alternative = "greater")
x <- seq(-3,3,by=0.01)
x <- seq(-3,3,0.01)
data_p <- data.frame(x = x,
y = dt(x, length(data)-1))
ggplot(data_p, aes(x=x, y=y)) +
geom_line()
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data[x > 2.23], fill = "orangered")
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data[x > 2.23])
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data[x > 2.23,])
data[x > 2.23,]
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data_p[x > 2.23,])
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data_p[x > 2.23,], fill="orange")
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data_p[x > 2.233,], fill="orange")
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data_p[x > 2.233,], fill="orange")
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data_p[x > 2.233,], fill="orange") +
annotate(geom=t[0.05]==1.74, x=2, y=-1, label="Scatter plot",
color="red")
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data_p[x > 2.233,], fill="orange") +
annotate(geom="t", x=2, y=-1, label="Scatter plot",
color="red")
color="red")
ggplot(data_p, aes(x=x, y=y)) +
geom_line() +
geom_area(data=data_p[x > 2.233,], fill="orange", color="red")
setwd("D:/limworkspace/R_Statistics/Ch_06_가설검정")
data <- readLines("data/restitution.txt")
data
data <- readLines("data/restitution.txt",header=T)
data <- read.table("data/restitution.txt",header=T)
data
# 2.2.2 유의수준 설정 : α = 0.05
# Z분포에서 우측 임계값
qnorm(1-0.05, 0, 1)
data
rel <- ifelse(data$rst < 0.4134 | data$rst > 0.4374, 0, 1)
rel
rel <- ifelse(data$rst < 0.4134 | data$rst > 0.4374, 1, 0) #  불량(1), 정상(0) 구별한 데이터
n <- length(rel) # 표본개수
nos <- sum(rel)  # 불량품 개수
p_0 <- nos / n  # 불량률
p_0
p_0 <- 0.1        # 영가설 하에서 모 비율
Z <- (p_hat-P_0)/sqrt( (p_0*(1-p_0))/n  )
Z
p_hat <- nos / n  # 불량률
p_0 <- 0.1        # 영가설 하에서 모 비율
Z <- (p_hat-P_0)/sqrt( (p_0*(1-p_0))/n  )
p_0 <- 0.1        # 영가설 하에서 모 비율
Z <- (p_hat-P_0)/sqrt( (p_0*(1-p_0))/n  )
Z <- (p_hat-p_0)/sqrt( (p_0*(1-p_0))/n  )
Z
# Z분포에서 우측 임계값
qnorm(1-0.05, 0, 1)
# Z분포에서 우측 임계값
qnorm(1-0.05, 0, 1)
# Z분포에서 우측 임계값
qnorm(1-0.05, 0, 1)
Z
# 2.2.3.2 유의확률을 이용한 판정
1-pnorm(Z)
# 2.2.3.3 prob.test 함수를 이용한 판정
prop.test(nos, n, p=0.1, alternative = "greater", correct = F)
# 2.2.3.2 유의확률을 이용한 판정
1-pnorm(Z)
setwd("D:/limworkspace/R_Statistics/Ch_07_여러 모집단의 평균 비교 검정")
# 1. 데이터 프레임 다루기
data <- read.table("http://www.amstat.org/publications/jse/datasets/babyboom.dat.txt", header = F)
data
# 1.1 데이터 프레임의 정보 취득하기
data <- read.table("http://www.amstat.org/publications/jse/datasets/babyboom.dat.txt", header = F)
# - norw와 ncol를 이용한 행과 열의 수 확인
nrow(data)
# - norw와 ncol를 이용한 행과 열의 수 확인
nrow(data); ncol(data)
# - str를 이용한 구조 확인
str(data)
# - head와 tail을 통한 자료의 앞부분, 뒷부분 확인
head(data,10); tail(data,5)
# - names를 이용한 열의 이름 확인 및 변경
names(data)
names(data) <- c("time", "gender", "weight", "minutes")
names(data) <- c("time", "gender", "weight", "minutes"); names(data)
row.names(data)
# 1.2 추출하고자 하는 열 선택하기 --------------
g1 <- data$gender
# - ["변수명"]을 이용한 열 지정
g3 <- data["gender"]
g3
# - []를 이용한 열 지정
g2 <- data[,2]; ; head(g2)
# - []를 이용한 열 지정
g2 <- data[,2]; head(g2)
# - ["변수명"]을 이용한 열 지정
g3 <- data["gender"]; head(g3)
# - [[]]을 이용한 열 지정
g4 <- data[[2]]
# - [[]]을 이용한 열 지정
g4 <- data[[2]]; head(g4)
# - 남아 신생아의 자료 가져오기
data[data$gender==2,]
# 1.3 조건에 맞는 행 추출하기
# [], base::subset, dplyr::filter
library(dplyr)
filter(data, gender==2)
# - 남아 신생아의 자료에서 평균 체중보다 큰 자료만 가져오기
data[data$gender==2 & data$weight > male.m,]
# - 남아 신생아의 자료에서 평균 체중보다 큰 자료만 가져오기
male.m <- mean(data$weight)
data[data$gender==2 & data$weight > male.m,]
subset(data, gender==2 & weight > male.m)
filter(data, gender==2 & weight > male.m)
# - 1.4 조건에 맞는 행과 열 선택하기
data[data$gender==2 & data$weight > male,m , c(2,4)]
# - 1.4 조건에 맞는 행과 열 선택하기
data[data$gender==2 & data$weight > male.m , c(2,4)]
subset(data, gender==2 & weigth > male.m, select = c(2,4))
subset(data, gender==2 & weight > male.m, select = c(2,4))
filter(data, gender==2 & weight > male.m, select = c(2,4))
filter(data, gender==2 & weight > male.m, select = c(2,4))
filter(data, gender==2 & weight > male.m, select == c(2,4))
?filter_
filter(data, gender==2 & weight > male.m)
filter(data, gender==2 & weight > male.m, select(data, c(2,4)))
select(data, c(2,4))
select(data, c(2,4)) %>% filter(data, gender==2 & weight > male.m))
select(data, c(2,4)) %>% filter(gender==2 & weight > male.m))
select(data, c(2,4)) %>% filter(gender==2 & weight > male.m)
select(data, c(2,4)) %>% filter(data, gender==2 & weight > male.m)
filter(data, gender==2 & weight > male.m) %>% select(c(2,4))
filter(data, gender==2 & weight > male.m) %>% select(c(2,4))
# - 1.5 데이터 프레임 저장하기
cahpter7 <- data[, c(2, 3)]
write.table(chapter7, "/data/chapter7.txt")
# - 1.5 데이터 프레임 저장하기
chapter7 <- data[, c(2, 3)]
write.table(chapter7, "/data/chapter7.txt")
write.table(chapter7, "./data/chapter7.txt")
write.table(chapter7, "./data/chapter7.txt", row.names = F)
# - 데이터 불러오기
ade <- read.csv("data/age.data.csv")
# - 데이터 불러오기
ade <- read.csv("data/age.data.csv", header = T)
str(age)
# - 데이터 불러오기
age <- read.csv("data/age.data.csv", header = T)
str(age)
head(age); tail(age)
summary(age)
# - 결측치 처리
age$score <- ifelse(age$score == 99, NA, age$score)
summary(age)
# - 위와 같은 결과지만 다른 방법
age2 <- read.csv("data/age.data.csv", header = T, na.strings = c("99"))
summary(age2)
# - 결측처리에 따른 수학함수(mean 등)의 수행 비교
mean(age$score)
mean(age$score, na.rm = T)
# - 결측치 판별 함수 is.na()
is.na(c(1, NA, 3, NA, 5))
# - 결측치 판별 함수 is.na()
na <- is.na(c(1, NA, 3, NA, 5))
count_na <- sum(na)
# - factor형 자료처리
age$scale <- factor(age$scale)
age$sex <- factor(age$sex)
str(age)
# - 범주의 값이 1일 때 기초통계량
length(age$age[age$scale=="1"])
mean(age$age[age$scale=="1"])
sd(length(age$age[age$scale=="1"]))
sd(age$age[age$scale=="1"])
# 2.3 "doBy" 패키지를 이용한 통계량 계산
install.packages("doBy")
library(doBy)
# - 지역 규모별 표본의 수
summaryBy(age~scale, data=age, FUN=c(length))
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, sd), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, sd), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, sd), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, var), na.rm=T)
?summaryBy
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, var, sd), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, var, sigma), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, var), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, var, sd), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, var, sd), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(sd), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, list=c(sd), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, list=c(sd, mean), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, list=c(sd, mean, var), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(sd, mean, var), na.rm=T)
# - 지역 규모별 평균과 표준편차
summaryBy(age~scale, data=age, FUN=c(mean, var), na.rm=T)
setwd("D:/limworkspace/R_Statistics/Assignment/AM_10")
p_0 <- 0.5
n <- 100
prop.test(50, 100, 0.5, alternative = "two.sided", conf.level = 0.95)
# n이 충분히 크다면 p_hat과 p_0의 차이가 없다.
# 이 때 모비율의 신뢰구간은
# P
prop.test(500, 1000, 0.5, alternative = "two.sided", conf.level = 0.95)
# 식에 따라 게산하면,
p_hat <- 0.5
p_0 <- 500/1000
k <- 1.96
p_hat - (k*sqrt( (p_hat*(1-p_hat))/n ))
p_0
p_hat - (k*sqrt( (p_0*(1-p_0))/n ))
prop.test(500, 1000, 0.5, alternative = "two.sided", conf.level = 0.95)
p_hat + (k*sqrt( (p_0*(1-p_0))/n ))
# 식에 따라 게산하면,
n <- 1000
p_hat <- 0.5
p_0 <- 500/1000
k <- 1.96
p_hat - (k*sqrt( (p_0*(1-p_0))/n ))
p_hat + (k*sqrt( (p_0*(1-p_0))/n ))
n <- 100
p_hat <- 4/5
# 여기서도 표본의 갯수가 충분하다고 가정하면, p_hat과 p_0의 차이가 없다고 가정하고 계산한다.
n <- 100
p_hat <- 4/5
p_0 - 4/5
prop.test(80, 100, 4/5, alternative = "two.sided")
p_0 - 80/100
# 직접 계산하면,
0.8 - (1.96*sqrt( (0.8*0.2)/100 ))
# 모비율 검정함수로 계산하면,
prop.test(80, 100, 4/5, alternative = "less")
# 모비율 검정함수로 계산하면,
prop.test(80, 100, 4/5, alternative = "two.sided")
# 직접 계산하면,
0.8 - (1.96*sqrt( (0.8*0.2)/100 ))
0.8 + (1.96*sqrt( (0.8*0.2)/100 ))
# 모비율 검정함수로 계산하면,
prop.test(800, 1000, 4/5, alternative = "two.sided")
p_0 - 800/1000
# 직접 계산하면,
0.8 - (1.96*sqrt( (0.8*0.2)/1000 ))
0.8 + (1.96*sqrt( (0.8*0.2)/1000 ))
# 여기서도 표본의 갯수가 충분하다고 가정하면, p_hat과 p_0의 차이가 없다고 가정하고 계산한다.
n <- 1000
p_0 <- 800/1000
p_0
# 모비율 검정함수로 계산하면,
prop.test(800, 1000, 4/5, alternative = "two.sided")
p_hat = 0.43
p_0 = 430/1000
p_0
p_hat = 0.43
qnorm(0.9)
qnorm(0.9)
qnorm(0.9,0,1)
pnorm(1.645)
pnorm(1.28)
qnorm(0.9)
0.43 - (1.28*sqrt( (0.43*(1-0.43))/1000 ))
0.43 + (1.28*sqrt( (0.43*(1-0.43))/1000 ))
prop.test(430, 1000, 0.43, alternative = "two.sided", conf.level = 0.9)
# 모비율 검정함수로 계산하면,
prop.test(800, 1000, 4/5, alternative = "two.sided", conf.level = 0.95)
# 직접 계산하면,
0.8 - (1.96*sqrt( (0.8*0.2)/1000 ))
0.8 + (1.96*sqrt( (0.8*0.2)/1000 ))
0.43 - (1.28*sqrt( (0.43*(1-0.43))/1000 ))
0.43 + (1.28*sqrt( (0.43*(1-0.43))/1000 ))
prop.test(430, 1000, 0.43, alternative = "two.sided", conf.level = 0.9)
x1 <- c(980, 1008, 968, 1032, 1012, 996, 1021, 1002, 996, 1017)
t.test(x1)
mean(x1)
t.test(x1, mu = mean(x1))
t.test(x1, mu = mean(x1), alternative = "tow.sided")
t.test(x1, mu = mean(x1), alternative = "two.sided")
t.test(x1, mu = 1000, alternative = "two.sided")
sd(x1)
ex1 <- c(980, 1008, 968, 1032, 1012, 996, 1021, 1002, 996, 1017)
ex2 <- c(58, 49, 39, 99, 32, 88, 62, 30, 55, 65, 44, 55, 57, 53, 88, 42, 39)
ex2
t.test(ex2, mu=55, alternative = "two.sided")
t.test(ex2, mu=55, alternative = "greater")
length(ex2)
sd(ex2)
ex3 <- c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97)
t.test(ex3, mu=8.1, alternative = "two.sided")
length(ex3); sd(ex3)
p_hat - (k*sqrt( (p_0*(1-p_0))/n )) # 신뢰구간 하한
p_hat + (k*sqrt( (p_0*(1-p_0))/n )) # 신뢰구간 상한
0.43 - (1.28*sqrt( (0.43*(1-0.43))/1000 )) # 신뢰구간 하한
0.43 + (1.28*sqrt( (0.43*(1-0.43))/1000 )) # 신뢰구간 상한
t.test(ex1, mu = 1000, alternative = "two.sided")
qqnorm(ex1)
qqnorm(ex1)
qqnorm(ex1); qqline(e1,col="red")
qqnorm(ex1); qqline(ex1,col="red")
# Shapiro-Wilk test
shapiro.test(ex1)
# Shapiro-Wilk test
shapiro.test(ex1)
